-- Table to store Movie information
CREATE TABLE MOVIE (
                       ID_THE_MOVIE_DB NUMBER PRIMARY KEY,
                       TITLE VARCHAR2(255) NOT NULL,
                       VOTE_AVERAGE NUMBER(3, 1),
                       RELEASE_DATE DATE,
                       DURATION_IN_SECONDS NUMBER,
                       ORIGINAL_TITLE VARCHAR2(255),
                       ORIGINAL_LANGUAGE VARCHAR2(10),
                       IMAGE_PATH VARCHAR2(255),
                       BUDGET NUMBER(20, 2)
);

-- Table to store Person information
CREATE TABLE PERSON (
                        ID_THE_MOVIE_DB NUMBER PRIMARY KEY,
                        NAME VARCHAR2(255) NOT NULL
);

-- Table to store Department information
CREATE TABLE DEPARTMENT (
                            NAME VARCHAR2(100) PRIMARY KEY
);

-- Table to store Job information, which references Department
CREATE TABLE JOB (
                     NAME VARCHAR2(100) PRIMARY KEY,
                     DEPARTMENT_NAME VARCHAR2(100),
                     CONSTRAINT FK_DEPARTMENT FOREIGN KEY (DEPARTMENT_NAME) REFERENCES DEPARTMENT(NAME)
);

-- Table to store Credit information, which references Person, Job, and Movie
CREATE TABLE CREDIT (
                        ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        ID_CAST_THE_MOVIE_DB NUMBER,
                        PERSON_ID NUMBER,
                        JOB_NAME VARCHAR2(100),
                        CHARACTER_NAME VARCHAR2(255),
                        MOVIE_ID NUMBER,
                        CONSTRAINT FK_PERSON FOREIGN KEY (PERSON_ID) REFERENCES PERSON(ID_THE_MOVIE_DB),
                        CONSTRAINT FK_JOB FOREIGN KEY (JOB_NAME) REFERENCES JOB(NAME),
                        CONSTRAINT FK_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES MOVIE(ID_THE_MOVIE_DB)
);

-- Optionally, table to store Genre information (if you want to store genres as separate entities)
CREATE TABLE GENRE (
                       GENRE_ID NUMBER PRIMARY KEY,
                       GENRE_NAME VARCHAR2(100)
);

-- Optional: linking table for Movie and Genre (if genresMap is meant to map movies to genres)
CREATE TABLE MOVIE_GENRE (
                             MOVIE_ID NUMBER,
                             GENRE_ID NUMBER,
                             CONSTRAINT FK_MOVIE_GENRE_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES MOVIE(ID_THE_MOVIE_DB),
                             CONSTRAINT FK_MOVIE_GENRE_GENRE FOREIGN KEY (GENRE_ID) REFERENCES GENRE(GENRE_ID),
                             PRIMARY KEY (MOVIE_ID, GENRE_ID)
);
